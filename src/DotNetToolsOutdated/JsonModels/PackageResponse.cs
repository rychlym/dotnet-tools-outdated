// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DotNetToolsOutdated.Models;
//
//    var packageResponse = PackageResponse.FromJson(jsonString);

namespace DotNetToolsOutdated.JsonModels
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PackageResponse
    {
        [JsonProperty("@id")]
        public Uri Id { get; set; }

        [JsonProperty("@type")]
        public string[] Type { get; set; }

        [JsonProperty("commitId")]
        public Guid CommitId { get; set; }

        [JsonProperty("commitTimeStamp")]
        public DateTimeOffset CommitTimeStamp { get; set; }

        [JsonProperty("count")]
        public long Count { get; set; }

        [JsonProperty("items")]
        public PackageResponseItem[] Items { get; set; }

        [JsonProperty("@context")]
        public Context Context { get; set; }
    }

    public partial class Context
    {
        [JsonProperty("@vocab")]
        public Uri Vocab { get; set; }

        [JsonProperty("catalog")]
        public Uri Catalog { get; set; }

        [JsonProperty("xsd")]
        public Uri Xsd { get; set; }

        [JsonProperty("items")]
        public Dependencies Items { get; set; }

        [JsonProperty("commitTimeStamp")]
        public CommitTimeStamp CommitTimeStamp { get; set; }

        [JsonProperty("commitId")]
        public CommitId CommitId { get; set; }

        [JsonProperty("count")]
        public CommitId Count { get; set; }

        [JsonProperty("parent")]
        public CommitTimeStamp Parent { get; set; }

        [JsonProperty("tags")]
        public Dependencies Tags { get; set; }

        [JsonProperty("reasons")]
        public Reasons Reasons { get; set; }

        [JsonProperty("packageTargetFrameworks")]
        public Dependencies PackageTargetFrameworks { get; set; }

        [JsonProperty("dependencyGroups")]
        public Dependencies DependencyGroups { get; set; }

        [JsonProperty("dependencies")]
        public Dependencies Dependencies { get; set; }

        [JsonProperty("packageContent")]
        public PackageContent PackageContent { get; set; }

        [JsonProperty("published")]
        public PackageContent Published { get; set; }

        [JsonProperty("registration")]
        public PackageContent Registration { get; set; }
    }

    public partial class CommitId
    {
        [JsonProperty("@id")]
        public string Id { get; set; }
    }

    public partial class CommitTimeStamp
    {
        [JsonProperty("@id")]
        public string Id { get; set; }

        [JsonProperty("@type")]
        public string Type { get; set; }
    }

    public partial class Dependencies
    {
        [JsonProperty("@container")]
        public string Container { get; set; }

        [JsonProperty("@id")]
        public string Id { get; set; }
    }

    public partial class PackageContent
    {
        [JsonProperty("@type")]
        public string Type { get; set; }
    }

    public partial class Reasons
    {
        [JsonProperty("@container")]
        public string Container { get; set; }
    }

    public partial class PackageResponseItem
    {
        [JsonProperty("@id")]
        public Uri Id { get; set; }

        [JsonProperty("@type")]
        public string Type { get; set; }

        [JsonProperty("commitId")]
        public Guid CommitId { get; set; }

        [JsonProperty("commitTimeStamp")]
        public DateTimeOffset CommitTimeStamp { get; set; }

        [JsonProperty("count")]
        public long Count { get; set; }

        [JsonProperty("items")]
        public ItemItem[] Items { get; set; }

        [JsonProperty("parent")]
        public Uri Parent { get; set; }

        [JsonProperty("lower")]
        public string Lower { get; set; }

        [JsonProperty("upper")]
        public string Upper { get; set; }
    }

    public partial class ItemItem
    {
        [JsonProperty("@id")]
        public Uri Id { get; set; }

        [JsonProperty("@type")]
        public ItemType Type { get; set; }

        [JsonProperty("commitId")]
        public Guid CommitId { get; set; }

        [JsonProperty("commitTimeStamp")]
        public DateTimeOffset CommitTimeStamp { get; set; }

        [JsonProperty("catalogEntry")]
        public CatalogEntry CatalogEntry { get; set; }

        [JsonProperty("packageContent")]
        public Uri PackageContent { get; set; }

        [JsonProperty("registration")]
        public Uri Registration { get; set; }
    }

    public partial class CatalogEntry
    {
        [JsonProperty("@id")]
        public Uri Id { get; set; }

        [JsonProperty("@type")]
        public CatalogEntryType Type { get; set; }

        [JsonProperty("authors")]
        public string Authors { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("iconUrl")]
        public Uri IconUrl { get; set; }

        [JsonProperty("id")]
        public string CatalogEntryId { get; set; }

        [JsonProperty("language")]
        public string Language { get; set; }

        [JsonProperty("licenseExpression")]
        public string LicenseExpression { get; set; }

        [JsonProperty("licenseUrl")]
        public Uri LicenseUrl { get; set; }

        [JsonProperty("listed")]
        public bool Listed { get; set; }

        [JsonProperty("minClientVersion")]
        public string MinClientVersion { get; set; }

        [JsonProperty("packageContent")]
        public Uri PackageContent { get; set; }

        [JsonProperty("projectUrl")]
        public Uri ProjectUrl { get; set; }

        [JsonProperty("published")]
        public DateTimeOffset Published { get; set; }

        [JsonProperty("requireLicenseAcceptance")]
        public bool RequireLicenseAcceptance { get; set; }

        [JsonProperty("summary")]
        public string Summary { get; set; }

        [JsonProperty("tags")]
        public string[] Tags { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("version")]
        public string Version { get; set; }
    }

    public enum CatalogEntryType { PackageDetails };

    public enum ItemType { Package };

    public partial class PackageResponse
    {
        public static PackageResponse FromJson(string json) => JsonConvert.DeserializeObject<PackageResponse>(json, DotNetToolsOutdated.JsonModels.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PackageResponse self) => JsonConvert.SerializeObject(self, DotNetToolsOutdated.JsonModels.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ItemTypeConverter.Singleton,
                CatalogEntryTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ItemTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ItemType) || t == typeof(ItemType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Package")
            {
                return ItemType.Package;
            }
            throw new Exception("Cannot unmarshal type ItemType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ItemType)untypedValue;
            if (value == ItemType.Package)
            {
                serializer.Serialize(writer, "Package");
                return;
            }
            throw new Exception("Cannot marshal type ItemType");
        }

        public static readonly ItemTypeConverter Singleton = new ItemTypeConverter();
    }

    internal class CatalogEntryTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CatalogEntryType) || t == typeof(CatalogEntryType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "PackageDetails")
            {
                return CatalogEntryType.PackageDetails;
            }
            throw new Exception("Cannot unmarshal type CatalogEntryType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CatalogEntryType)untypedValue;
            if (value == CatalogEntryType.PackageDetails)
            {
                serializer.Serialize(writer, "PackageDetails");
                return;
            }
            throw new Exception("Cannot marshal type CatalogEntryType");
        }

        public static readonly CatalogEntryTypeConverter Singleton = new CatalogEntryTypeConverter();
    }

}
